/**
 * Django Admin Inlines (Formset) - Modernized, Readable Version
 * -------------------------------------------------------------
 * Enables add/remove for inlines in Django admin, via jQuery.
 * This is a readable version of the minimized code you provided.
 * Compatible with Django 2.x/3.x and jQuery 1.9+.
 * 
 * Author: Stanislaus Madueke et al. Modernized by OpenAI 2024.
 */
(function($) {
  // Generic formset (add/remove dynamic forms)
  $.fn.formset = function(options) {
    var opts = $.extend({}, $.fn.formset.defaults, options);
    var $forms = $(this);
    var $parent = $forms.parent();

    // Helper: update element index for naming/id
    function updateElementIndex(el, prefix, ndx) {
      var id_regex = new RegExp("(" + prefix + "-(\\d+|__prefix__))");
      var replacement = prefix + "-" + ndx;
      if ($(el).attr("for")) {
        $(el).attr("for", $(el).attr("for").replace(id_regex, replacement));
      }
      if (el.id) {
        el.id = el.id.replace(id_regex, replacement);
      }
      if (el.name) {
        el.name = el.name.replace(id_regex, replacement);
      }
    }

    // Track counts
    var $totalForms = $("#id_" + opts.prefix + "-TOTAL_FORMS").attr("autocomplete", "off");
    var nextIndex = parseInt($totalForms.val(), 10);
    var $maxForms = $("#id_" + opts.prefix + "-MAX_NUM_FORMS").attr("autocomplete", "off");
    var showAddBtn = $maxForms.val() === "" || ($maxForms.val() - $totalForms.val()) > 0;

    // Add styling class to each (skip empty row template)
    $forms.each(function() {
      $(this).not("." + opts.emptyCssClass).addClass(opts.formCssClass);
    });

    // Add button for new form
    if ($forms.length && showAddBtn) {
      var $addBtn;
      if ($forms.attr("tagName") === "TR") {
        // Table-based inlines: insert after last row
        var numCols = $forms.eq(-1).children().length;
        $parent.append(
          '<tr class="' + opts.addCssClass + 
          '"><td colspan="' + numCols + 
          '"><a href="javascript:void(0)">' + opts.addText + "</a></td></tr>"
        );
        $addBtn = $parent.find("tr:last a");
      } else {
        // Block inlines: insert after last form
        $forms.filter(":last").after(
          '<div class="' + opts.addCssClass + 
          '"><a href="javascript:void(0)">' + opts.addText + "</a></div>"
        );
        $addBtn = $forms.filter(":last").next().find("a");
      }

      // Add new form on click
      $addBtn.click(function(event) {
        event.preventDefault();
        var $totalForms = $("#id_" + opts.prefix + "-TOTAL_FORMS");
        var $empty = $("#" + opts.prefix + "-empty");
        var $row = $empty.clone(true);

        $row.removeClass(opts.emptyCssClass)
          .addClass(opts.formCssClass)
          .attr("id", opts.prefix + "-" + nextIndex);

        // Add delete button for new row
        if ($row.is("tr")) {
          $row.children(":last").append(
            '<div><a class="' + opts.deleteCssClass + '" href="javascript:void(0)">' + opts.deleteText + "</a></div>"
          );
        } else if ($row.is("ul") || $row.is("ol")) {
          $row.append(
            '<li><a class="' + opts.deleteCssClass + '" href="javascript:void(0)">' + opts.deleteText + "</a></li>"
          );
        } else {
          $row.children(":first").append(
            '<span><a class="' + opts.deleteCssClass + '" href="javascript:void(0)">' + opts.deleteText + "</a></span>"
          );
        }

        // Update names/ids for each input
        $row.find("*").each(function() {
          updateElementIndex(this, opts.prefix, $totalForms.val());
        });

        // Insert before the template row
        $row.insertBefore($empty);
        $totalForms.val(parseInt($totalForms.val(), 10) + 1);
        nextIndex += 1;

        // Hide add if at max
        if ($maxForms.val() !== "" && ($maxForms.val() - $totalForms.val()) <= 0) {
          $addBtn.parent().hide();
        }

        // Add delete handler
        $row.find("a." + opts.deleteCssClass).click(function(event) {
          event.preventDefault();
          var $delRow = $(this).parents("." + opts.formCssClass);
          $delRow.remove();
          nextIndex -= 1;
          if (opts.removed) opts.removed($delRow);

          var $formsAll = $("." + opts.formCssClass);
          $("#id_" + opts.prefix + "-TOTAL_FORMS").val($formsAll.length);
          if ($maxForms.val() === "" || ($maxForms.val() - $formsAll.length) > 0) {
            $addBtn.parent().show();
          }
          // Resequence all remaining forms
          for (var i = 0; i < $formsAll.length; i++) {
            updateElementIndex($formsAll.get(i), opts.prefix, i);
            $($formsAll.get(i)).find("*").each(function() {
              updateElementIndex(this, opts.prefix, i);
            });
          }
        });

        if (opts.added) opts.added($row);
      });
    }

    return this;
  };

  // Defaults for formset
  $.fn.formset.defaults = {
    prefix: "form",
    addText: "add another",
    deleteText: "remove",
    addCssClass: "add-row",
    deleteCssClass: "delete-row",
    emptyCssClass: "empty-row",
    formCssClass: "dynamic-form",
    added: null,
    removed: null
  };

  // Tabular inline formset (table-based inlines)
  $.fn.tabularFormset = function(options) {
    var $rows = $(this);
    // Alternate row coloring for admin style
    var alternateRows = function() {
      $($rows.selector).not(".add-row").removeClass("row1 row2")
        .filter(":even").addClass("row1").end()
        .filter(":odd").addClass("row2");
    };
    $rows.formset({
      prefix: options.prefix,
      addText: options.addText,
      formCssClass: "dynamic-" + options.prefix,
      deleteCssClass: "inline-deletelink",
      deleteText: options.deleteText,
      emptyCssClass: "empty-form",
      removed: alternateRows,
      added: function(row) {
        // Reinit prepopulated fields
        row.find(".prepopulated_field").each(function() {
          var $input = $(this).find("input, select, textarea"),
              depList = $input.data("dependency_list") || [],
              dependencies = [];
          $.each(depList, function(i, field) {
            dependencies.push("#" + row.find(".field-" + field).find("input, select, textarea").attr("id"));
          });
          if (dependencies.length) {
            $input.prepopulate(dependencies, $input.attr("maxlength"));
          }
        });
        // Reinit date/time/filters
        if (typeof DateTimeShortcuts !== "undefined") {
          $(".datetimeshortcuts").remove();
          DateTimeShortcuts.init();
        }
        if (typeof SelectFilter !== "undefined") {
          $(".selectfilter").each(function(i, el) {
            var parts = el.name.split("-");
            SelectFilter.init(el.id, parts[parts.length - 1], false, options.adminStaticPrefix);
          });
          $(".selectfilterstacked").each(function(i, el) {
            var parts = el.name.split("-");
            SelectFilter.init(el.id, parts[parts.length - 1], true, options.adminStaticPrefix);
          });
        }
        alternateRows(row);
      }
    });
    return $rows;
  };

  // Stacked inline formset (block inlines)
  $.fn.stackedFormset = function(options) {
    var $rows = $(this);
    // Update inline label numbers
    var updateInlineLabel = function() {
      $($rows.selector).find(".inline_label").each(function(i) {
        $(this).html($(this).html().replace(/(#\d+)/g, "#" + (i + 1)));
      });
    };
    $rows.formset({
      prefix: options.prefix,
      addText: options.addText,
      formCssClass: "dynamic-" + options.prefix,
      deleteCssClass: "inline-deletelink",
      deleteText: options.deleteText,
      emptyCssClass: "empty-form",
      removed: updateInlineLabel,
      added: function(row) {
        row.find(".prepopulated_field").each(function() {
          var $input = $(this).find("input, select, textarea"),
              depList = $input.data("dependency_list") || [],
              dependencies = [];
          $.each(depList, function(i, field) {
            dependencies.push("#" + row.find(".form-row .field-" + field).find("input, select, textarea").attr("id"));
          });
          if (dependencies.length) {
            $input.prepopulate(dependencies, $input.attr("maxlength"));
          }
        });
        if (typeof DateTimeShortcuts !== "undefined") {
          $(".datetimeshortcuts").remove();
          DateTimeShortcuts.init();
        }
        if (typeof SelectFilter !== "undefined") {
          $(".selectfilter").each(function(i, el) {
            var parts = el.name.split("-");
            SelectFilter.init(el.id, parts[parts.length - 1], false, options.adminStaticPrefix);
          });
          $(".selectfilterstacked").each(function(i, el) {
            var parts = el.name.split("-");
            SelectFilter.init(el.id, parts[parts.length - 1], true, options.adminStaticPrefix);
          });
        }
        updateInlineLabel(row);
      }
    });
    return $rows;
  };

})(django.jQuery);